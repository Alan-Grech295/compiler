/* This function takes two integers and return true if
* the first argument is greater than the second .
* Otherwise if returns false. */
fun XGreaterY(x: int , y: int) -> bool {
    let ans: bool = true;
    if (y > x) { ans = false; }
    return ans;
}

// Same functionality as function above but using less code
fun XGreaterY_2(x: int , y: int) -> bool {
    return x > y;
}
// Allocates memory space for 4 variables (x, y, t0, t1).
fun AverageOfTwo(x: int , y: int) -> float {
    let t0: int = x + y;
    let t1: float = t0 / 2 as float; // casting expression to a float
    return t1;
}

/* Same functionality as function above but using less code.
* Note the use of the brackets in the expression following
* the return statement. Allocates space for 2 variables. */
fun AverageOfTwo_2(x: int, y: int) -> float {
    return (x + y) / 2 as float;
}

// Takes two integers and returns the max of the two.
fun Max(x:int, y:int) -> int {
    let m: int = x;
    if (y > m) { m = y; }
    return m;
}

// Get black
fun Black() -> colour {
    return #000000;
}

// Get red
fun Red() -> colour {
    return #FF0000;
}

// Converting int to colour
fun IntToCol(x: int) -> colour {
    return x as colour;
}

fun Race(p1_c:colour , p2_c:colour , score_max: int) -> int {
    let p1_score: int = 0; 
    let p2_score: int = 0;

    //while (Max(p1_score, p2_score) < score_max) //Alternative loop 
    while ((p1_score < score_max) and (p2_score < score_max)) {
        let p1_toss: int = __random_int 1000; 
        let p2_toss: int = __random_int 1000;

        if (p1_toss>p2_toss) { 
            p1_score = p1_score + 1; 
            __write 1, p1_score, p1_c; 
        } else { 
            p2_score = p2_score + 1; 
            __write 2, p2_score, p2_c; 
        } 
        __delay 100; 
    } 
    
    if (p2_score > p1_score) { 
        return 2; 
    } 
    return 1; 
}

